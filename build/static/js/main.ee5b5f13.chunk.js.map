{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","console","log","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAAe,I,kBCIFA,EAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCDPC,G,MAAW,SAACR,GAAD,OACrB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAEhB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNpBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACCZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACZG,SAAUF,MCwEDG,E,kDArEX,aAAe,IAAD,8BACV,gBAqBJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SApBpC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALP,E,qDAYd,WAAqB,IAAD,OAChBI,QAAQC,IAAI,gBACZC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAET,SAAUoB,OAC7CN,QAAQC,IAAI,iB,oBAShB,WAAU,IAAD,EAEyBM,KAAKR,MAA9Bb,EAFA,EAEAA,SAAUU,EAFV,EAEUA,YAEXY,EAAmBtB,EAASuB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASf,EAAYc,kBAGlD,OACI,sBAAKhC,UAAU,MAAf,UACE,0CACA,cAAC,EAAD,CACEW,YAAc,yBACdC,aAAgBiB,KAAKjB,eAEvB,cAAC,EAAD,CAAUJ,SAAUsB,W,GA7CdI,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee5b5f13.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n\t<div className='card-container'>\r\n\t\t<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n\t\t<h2>{props.monster.name}</h2>\r\n\t\t<p>{props.monster.email}</p>\r\n\t</div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component.jsx';\r\n\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = (props) => (\r\n\t  <div className='card-list'>\r\n\t\t\t{props.monsters.map(monster => {\r\n\t      // console.log(`rendering ${monster.id}`);\r\n\t      return <Card key={monster.id} monster={monster}/>\r\n\t    })}\r\n\t\t</div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n    <input \r\n    \tclassName='search'\r\n    \ttype='search' \r\n    \tplaceholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//components\nimport { CardList } from './components/card-list/card-list.component.jsx';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\n\n\nclass App extends Component {\n\n    //this constructor super access the state of the parent of class App\n    //i.e. component\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n\n        //we don't need this if we use => function to define handleChange\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        console.log('before fetch')\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ monsters: users }));\n        console.log('after fetch')\n    }\n\n    //using arrow function allows us to lexically bind the component context\n    //to the function context, so this within handlChange now \n    handleChange = (e) => {\n      this.setState({searchField : e.target.value})\n    }\n\n    render() {\n\n      const {monsters, searchField} = this.state;\n\n      const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n      return (\n          <div className=\"App\">\n            <h1>Monsters</h1>\n            <SearchBox\n              placeholder = 'type to filter monster'\n              handleChange = {this.handleChange}\n            />\n            <CardList monsters={filteredMonsters}/>\n        </div>\n      );\n\n    }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}